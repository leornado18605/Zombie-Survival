using UnityEngine;
using Cinemachine;
using System.Collections;
public enum EvolutionStage { Ground, Evolved, Fly }

[DisallowMultipleComponent]
public class PlayerEvolution : MonoBehaviour
{
    [Header("Evolution Settings")]
    [SerializeField] private EvolutionStage currentStage = EvolutionStage.Ground;
    [SerializeField] private int dnaCollected = 0;
    [SerializeField] private int dnaToEvolveStage2 = 10;
    [SerializeField] private int dnaToEvolveStage3 = 25;

    [Header("Prefabs")]
    [SerializeField] private GameObject evolvedPrefab;
    [SerializeField] private GameObject flyPrefab;

    [Header("References")]
    [SerializeField] private PlayerMovement movement;
    [SerializeField] private Animator animator;
    [SerializeField] private CinemachineVirtualCamera vcam; // g√°n trong Inspector

    [Header("Effects")]
    [SerializeField] private ParticleSystem evolveEffect;
    [SerializeField] private AudioClip evolveSound;

    [SerializeField] private CinemachineCameraOrbit cameraOrbit; // g√°n th·ªß c√¥ng trong Inspector
    
    [SerializeField] private Transform groundAnchor; // g√°n v·ªã tr√≠ b√†n ch√¢n c·ªßa player

    private AudioSource audioSource;

    private void Awake()
    {
        audioSource = gameObject.AddComponent<AudioSource>();
    }

    private void Start()
    {
        ApplyStage(currentStage);
    }

    // ---------------------------
    // Public API
    // ---------------------------
    public void AddDNA(int amount)
    {
        dnaCollected += amount;
        Debug.Log($"üß¨ DNA Collected: {dnaCollected}");
        TryEvolve();
    }

    public void AssignCamera(CinemachineVirtualCamera cam)
    {
        vcam = cam;
    }

    public void SetInitialState(EvolutionStage stage, int dna)
    {
        currentStage = stage;
        dnaCollected = dna;
        ApplyStage(stage);
    }

    // ---------------------------
    // Evolution logic
    // ---------------------------
    public void TryEvolve()
    {
        Debug.Log($"üîé TryEvolve() Stage={currentStage}, DNA={dnaCollected}");
        if (currentStage == EvolutionStage.Ground && dnaCollected >= dnaToEvolveStage2)
        {
            Debug.Log("‚úÖ Evolve to Evolved");
            EvolveTo(EvolutionStage.Evolved);
        }
        else if (currentStage == EvolutionStage.Evolved && dnaCollected >= dnaToEvolveStage3)
        {
            Debug.Log("‚úÖ Evolve to Fly");
            EvolveTo(EvolutionStage.Fly);
        }
    }

    private void EvolveTo(EvolutionStage newStage)
    {
        Debug.Log($"üß¨ Evolving {currentStage} ‚Üí {newStage}");

        // üîπ Hi·ªáu ·ª©ng ti·∫øn h√≥a
        if (animator) animator.SetTrigger("Evolve");
        if (evolveEffect) Instantiate(evolveEffect, transform.position, Quaternion.identity);
        if (evolveSound) audioSource.PlayOneShot(evolveSound);

        // ‚úÖ Gi·ªØ l·∫°i v·ªã tr√≠ & rotation c·ªßa player c≈©
        Vector3 pos = groundAnchor ? groundAnchor.position : transform.position;
        Quaternion rot = transform.rotation;


        // ‚úÖ X√°c ƒë·ªãnh prefab k·∫ø ti·∫øp
        GameObject nextPrefab = newStage switch
        {
            EvolutionStage.Evolved => evolvedPrefab,
            EvolutionStage.Fly => flyPrefab,
            _ => null
        };

        if (!nextPrefab)
        {
            Debug.LogWarning($"‚ö†Ô∏è Missing prefab for {newStage}");
            return;
        }

        // ‚úÖ Spawn player m·ªõi ƒë√∫ng v·ªã tr√≠
        GameObject newPlayer = Instantiate(nextPrefab, pos, rot);

        var newCtrl = newPlayer.GetComponent<CharacterController>();
        
        if (Physics.Raycast(pos + Vector3.up * 1f, Vector3.down, out RaycastHit hit, 5f, LayerMask.GetMask("Default")))
        {
            pos.y = hit.point.y; // ƒë·∫∑t y ch√≠nh x√°c t·∫°i m·∫∑t ƒë·∫•t
            newPlayer.transform.position = pos;
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·∫∑t ƒë·∫•t d∆∞·ªõi ch√¢n player!");
        }
        
        if (newCtrl)
        {
            newCtrl.enabled = false;
            newPlayer.transform.position = pos;
            newCtrl.enabled = true;
        }
        // ‚úÖ L·∫•y script PlayerEvolution t·ª´ reference prefab c√≥ s·∫µn (kh√¥ng GetComponent)
        // V√¨ script n·∫±m s·∫µn trong prefab ‚Üí Unity t·ª± li√™n k·∫øt khi b·∫°n k√©o v√†o Inspector.
        PlayerEvolution nextEvolution = newPlayer.GetComponent<PlayerEvolution>();

        if (nextEvolution == null)
        {
            Debug.LogError($"‚ùå Missing PlayerEvolution script in prefab {newPlayer.name}");
            Destroy(newPlayer);
            return;
        }

        // ‚úÖ G√°n d·ªØ li·ªáu v√† camera
        nextEvolution.SetInitialState(newStage, dnaCollected);
        nextEvolution.AssignCamera(vcam);

        // ‚úÖ C·∫≠p nh·∫≠t cho script CameraOrbit (g√°n s·∫µn reference trong Inspector)
        if (cameraOrbit != null)
            cameraOrbit.SetTarget(newPlayer.transform);

        // ‚úÖ G√°n Follow / LookAt
        if (vcam != null)
        {
            vcam.Follow = newPlayer.transform;
            vcam.LookAt = newPlayer.transform;
        }

        // ‚úÖ ·∫®n player c≈©
        foreach (var r in GetComponentsInChildren<Renderer>())
            r.enabled = false;

        // ‚úÖ X√≥a player c≈© sau 0.3s
        Destroy(gameObject, 0.3f);
    }

    private void ApplyStage(EvolutionStage stage)
    {
        currentStage = stage;

        switch (stage)
        {
            case EvolutionStage.Ground:
                movement.EnableFlyingMode(false);
                movement.SetSpeedMultiplier(1f);
                break;

            case EvolutionStage.Evolved:
                movement.EnableFlyingMode(false);
                movement.SetSpeedMultiplier(1.5f);
                break;

            case EvolutionStage.Fly:
                movement.EnableFlyingMode(true);
                movement.SetSpeedMultiplier(1.8f);
                break;
        }
    }
}
